namespace Win32.Common
{
    /// <inheritdoc/>
    internal partial class Unmanaged
    {
        /// <inheritdoc/>
        public partial class Kernel32
        {
            /// <summary>
            ///     An enclave is an isolated region of code and data within the address space for an application. Only code that runs within the
            ///     enclave can access data within the same enclave.
            /// </summary>
            public partial class EnclaveApi
            {
                /// <summary>
                ///     Specifies how another enclave must be related to the enclave that calls <c>EnclaveSealData</c> for the enclave to unseal the data.
                /// </summary>
                /// <see href="ENCLAVE_SEALING_IDENTITY_POLICY`">https://learn.microsoft.com/en-us/windows/win32/api/ntenclv/ne-ntenclv-enclave_sealing_identity_policy</see>
                public enum ENCLAVE_SEALING_IDENTITY_POLICY
                {
                    /// <summary>
                    ///     This value is not valid. Do not use.
                    /// </summary>
                    ENCLAVE_IDENTITY_POLICY_SEAL_INVALID = 0,
                    /// <summary>
                    ///     All of the bytes of every image loaded into the unsealing enclave must match the bytes of every image in the sealing
                    ///     enclave in order for EnclaveSealData to decrypt the data.
                    /// </summary>
                    ENCLAVE_IDENTITY_POLICY_SEAL_EXACT_CODE,
                    /// <summary>
                    ///     All of the bytes of the primary image loaded into the unsealing enclave must match the bytes for the primary image in the
                    ///     sealing enclave in order for EnclaveSealData to decrypt the data.
                    /// </summary>
                    ENCLAVE_IDENTITY_POLICY_SEAL_SAME_PRIMARY_CODE,
                    /// <summary>
                    ///     All of the bytes of the primary image loaded into the unsealing enclave must match the bytes for the primary image in the
                    ///     sealing enclave in order for EnclaveSealData to decrypt the data.
                    /// </summary>
                    ENCLAVE_IDENTITY_POLICY_SEAL_SAME_IMAGE,
                    /// <summary>
                    ///     The author identifier and family identifier of the primary image of the unsealing enclave must match the author identifier
                    ///     and family identifier of the primary image of the sealing enclave in order for EnclaveSealData to decrypt the data. This
                    ///     case permits an enclave to exchange information with any other enclave in the same family
                    /// </summary>
                    ENCLAVE_IDENTITY_POLICY_SEAL_SAME_FAMILY,
                    /// <summary>
                    ///     The author identifier of the primary image of the unsealing enclave must match the author identifier of the primary image
                    ///     of the sealing enclave in order for EnclaveSealData to decrypt the data. This case permits an enclave to exchange
                    ///     information with any other enclave generated by the same author.
                    /// </summary>
                    ENCLAVE_IDENTITY_POLICY_SEAL_SAME_AUTHOR,
                }
                /// <summary>
                ///     The architecture type of an enclave.
                /// </summary>
                public enum ENCLAVE_TYPE : uint
                {
                    /// <summary>
                    ///     An enclave for the Intel Software Guard Extensions (SGX) architecture extension.
                    /// </summary>
                    ENCLAVE_TYPE_SGX = 0x00000001,
                    /// <summary>
                    ///     Supports SGX2 and SGX1 enclaves. The platform and OS support SGX2 instructions with EDMM on this platform (in addition to
                    ///     other SGX2 constructs).
                    /// </summary>
                    ENCLAVE_TYPE_SGX2 = 0x00000002,
                    /// <summary>
                    ///     A VBS enclave.
                    /// </summary>
                    ENCLAVE_TYPE_VBS = 0x00000010
                }
                /// <summary>
                ///     A flag that indicates whether the enclave permits debugging.
                /// </summary>
                public enum ENCLAVE_VBS_FLAG : uint
                {
                    /// <summary>
                    ///     The enclave does not permit debugging.
                    /// </summary>
                    ENCLAVE_VBS_FLAG_NODEBUG = 0x00000000,
                    /// <summary>
                    ///     The enclave permits debugging.
                    /// </summary>
                    ENCLAVE_VBS_FLAG_DEBUG = 0x00000001,
                }
            }
        }
    }
}
