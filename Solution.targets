<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!-- Assembly Attributes -->
	<PropertyGroup>
		<TargetFramework>net8.0</TargetFramework>
		<!--<TargetFrameworks>net7.0-android;net7.0-ios;net7.0-maccatalyst</TargetFrameworks>-->
		<!--<TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net8.0-windows10.0.19041.0</TargetFrameworks>-->
		<PlatformTarget>x64</PlatformTarget>
		<Platforms>AnyCPU;x64</Platforms>
		
		<Authors>None</Authors>
		<Company>None</Company>
		<Copyright>None Â© 2024</Copyright>
		<GenerateDocumentationFile>true</GenerateDocumentationFile>

		<!-- For multi-targeting -->
		<!--<TargetFrameworks>net6.0;net6.0-windows10.0.19041.0;net6.0-android</TargetFrameworks>
		<TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net8.0-windows10.0.19041.0</TargetFrameworks>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">21.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.19041.0</SupportedOSPlatformVersion>
		<TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.19041.0</TargetPlatformMinVersion>-->
	</PropertyGroup>

	<!-- Code Attributes -->
	<PropertyGroup>
		<LangVersion>latest</LangVersion>
		<Nullable>enable</Nullable>
		<!--<ImplicitUsings>enable</ImplicitUsings>-->
	</PropertyGroup>

	<!-- NuGet Package Reference -->
	<PropertyGroup>
		<TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
	</PropertyGroup>
	<Target Name="CopyProjectReferencesToPackage" DependsOnTargets="BuildOnlySettings;ResolveReferences">
		<ItemGroup>
			<!-- Filter out unnecessary files -->
			<_ReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths->WithMetadataValue('ReferenceSourceTarget', 'ProjectReference')->WithMetadataValue('PrivateAssets', 'All'))"/>
		</ItemGroup>

		<!-- Print batches for debug purposes -->
		<Message Text="Batch for .nupkg: ReferenceCopyLocalPaths = @(_ReferenceCopyLocalPaths), ReferenceCopyLocalPaths.DestinationSubDirectory = %(_ReferenceCopyLocalPaths.DestinationSubDirectory) Filename = %(_ReferenceCopyLocalPaths.Filename) Extension = %(_ReferenceCopyLocalPaths.Extension)" Importance="High" Condition="'@(_ReferenceCopyLocalPaths)' != ''" />

		<ItemGroup>
			<!-- Add file to package with consideration of sub folder. If empty, the root folder is chosen. -->
			<BuildOutputInPackage Include="@(_ReferenceCopyLocalPaths)" TargetPath="%(_ReferenceCopyLocalPaths.DestinationSubDirectory)"/>
		</ItemGroup>
	</Target>

	<!-- Symbols and NuGet Package options -->
	<PropertyGroup>
		<!-- Only put in the shared file for projects that need a NuGet package created for all projects -->
		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
	</PropertyGroup>
	<PropertyGroup Condition="'$(Configuration)'=='Debug'">
		<AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
		<PublishPackageMetadata>true</PublishPackageMetadata>
		<EmbedUntrackedSources>true</EmbedUntrackedSources>
		<PublishRepositoryUrl>true</PublishRepositoryUrl>
		<SymbolPackageFormat>snupkg</SymbolPackageFormat>
		<IncludeSymbols>true</IncludeSymbols>
		<IncludeSource>true</IncludeSource>
		<DebugSymbols>true</DebugSymbols>
	</PropertyGroup>
	<PropertyGroup Condition="'$(Configuration)'=='Release'">
		<AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
		<PublishPackageMetadata>false</PublishPackageMetadata>
		<EmbedUntrackedSources>true</EmbedUntrackedSources>
		<PublishRepositoryUrl>false</PublishRepositoryUrl>
		<SymbolPackageFormat>snupkg</SymbolPackageFormat>
		<IncludeSymbols>false</IncludeSymbols>
		<IncludeSource>false</IncludeSource>
		<DebugSymbols>false</DebugSymbols>
	</PropertyGroup>

	<!-- PDB Files -->
	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
		<DebugType>embedded</DebugType>
		<DebugType>full</DebugType>
	</PropertyGroup>
	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
		<DebugType>pdbonly</DebugType>
	</PropertyGroup>

	<!-- Source Link for Source Files -->
	<ItemGroup >
		<PackageReference Include="Microsoft.SourceLink.AzureRepos.Git" Version="1.1.1" PrivateAssets="All"/>
	</ItemGroup>

	<!-- Standardize output as DevOps sucks at this stuff -->
	<PropertyGroup>
		<OutputPath>bin\$(Configuration)</OutputPath>
		<AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
		<AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
	</PropertyGroup>

	<!-- Only for DevOps builds -->
	<PropertyGroup Condition="'$(TF_BUILD)' == 'true'">
		<!-- Normalize file paths -->
		<ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
	</PropertyGroup>

	<Target Name="SignPackageForPublish" BeforeTargets="_PublishNoBuildAlternative">
		<Message Text="Signing targets for publish..." />
		<ConvertToAbsolutePath Paths="$(PublishDir)">
			<Output TaskParameter="AbsolutePaths" PropertyName="FullPublishDir" />
		</ConvertToAbsolutePath>
		<ItemGroup>
			<PublishFiles Include="$(FullPublishDir)\*$(TargetName)*.dll;$(FullPublishDir)\*$(TargetName)*.exe;$(FullPublishDir)\*Win32.*.dll" />
		</ItemGroup>
		<Message Text="%(PublishFiles.FullPath)" />
		<Exec Command="ruby &quot;$(SIGN_SCRIPT_LOC)&quot; &quot;%(PublishFiles.FullPath)&quot;" ConsoleToMSBuild="true" ContinueOnError="WarnAndContinue" />
	</Target>
</Project>